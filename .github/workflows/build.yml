name: Build the mod
on:
    workflow_dispatch

jobs:
    # TODO: espeak-ng provides separate build steps specific for Windows.
    #       The Windows version should be built separately, so the end DLL wont contain GNUC compiler things and will be more compatible.
    #       https://github.com/espeak-ng/espeak-ng/blob/master/docs/building.md#windows
    build-natives:
        runs-on: ${{ matrix.sys.os }}
        strategy:
            matrix:
                sys:
                    - { os: ubuntu-latest, shell: bash }
                    - { os: macos-latest, shell: bash }
                    - { os: windows-latest, shell: "msys2 {0}" }
        defaults:
            run:
                shell: ${{ matrix.sys.shell }}
        
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set espeak-ng commit SHA
              id: espeak-sha
              shell: bash
              run: echo "sha=$(git ls-remote https://github.com/espeak-ng/espeak-ng.git HEAD | cut -f1)" >> $GITHUB_OUTPUT

            - name: Cache espeak-ng
              id: cache-espeak
              uses: actions/cache@v3
              with:
                path: espeak-ng/build
                key: espeak-build-${{ matrix.sys.os }}-${{ steps.espeak-sha.outputs.sha }}
                restore-keys: espeak-build-${{ matrix.sys.os }}-
        
            # Install dependencies
            - name: Install dependencies (Linux)
              if: runner.os == 'Linux' && steps.cache-espeak.outputs.cache-hit != 'true'
              run: |
                sudo apt-get update
                sudo apt-get install -y build-essential cmake pkg-config libasound2-dev libpulse-dev
            
            - name: Install dependencies (MacOS)
              if: runner.os == 'macOS' && steps.cache-espeak.outputs.cache-hit != 'true'
              run: |
                brew update
                brew install cmake pkg-config
            
            - name: Setup MSYS2 (Windows)
              if: runner.os == 'Windows' && steps.cache-espeak.outputs.cache-hit != 'true'
              uses: msys2/setup-msys2@v2
              with:
                msystem: MINGW64
                update: true

            - name: Install packages via MSYS2 (Windows)
              if: runner.os == 'Windows' && steps.cache-espeak.outputs.cache-hit != 'true'
              run: |
                pacman -S --noconfirm --needed git mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-pkg-config
            
            - name: Setup CMake helper (cross-platform)
              if: steps.cache-espeak.outputs.cache-hit != 'true'
              uses: jwlawson/actions-setup-cmake@v2
            
            # Configure stuff
            - name: Configure and set up espeak-ng (Windows)
              if: steps.cache-espeak.outputs.cache-hit != 'true'
              run: |
                git clone --depth 1 https://github.com/espeak-ng/espeak-ng.git
                cd espeak-ng

                CC=clang ./configure --with-mbrola=yes
                # TODO: Consider leaving out -DBUILD_SHARED_LIBS=ON and building cross-platform static library files? (.a)
                cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON
                cmake --build build --config Release -- -j$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || 2)
                cmake --install build --prefix ./install

            # Find espeak-ng
            - name: Finding the built out espeak-ng lib
              id: findlib
              run: |
                cd espeak-ng
                case "$(uname -s)" in
                    Linux*)  LIB="install/lib/libespeak-ng.so" ;;
                    Darwin*) LIB="install/lib/libespeak-ng.dylib" ;;
                    MINGW*|MSYS*|CYGWIN*) LIB="install/bin/libespeak-ng.dll" ;;
                    *) LIB="" ;;
                esac

                if [ ! -f "$LIB" ]; then
                    echo "libespeak.* not found at expected path: $LIB"
                    exit 1
                fi
                
                echo "found=$LIB"
                echo "found=$LIB" >> $GITHUB_OUTPUT
            
            - name: Upload espeak-ng native library
              uses: actions/upload-artifact@v4
              with:
                name: natives-${{ runner.os }}
                path: espeak-ng/${{ steps.findlib.outputs.found }}
            
            - name: Upload espeak-ng data folder
              if: runner.os == 'Linux'
              uses: actions/upload-artifact@v4
              with:
                name: espeak-ng-data
                path: espeak-ng/install/share/espeak-ng-data/**
        
    build:
        runs-on: ubuntu-latest
        needs: build-natives
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            
            - name: Clean up native folder in case there are existing files in the repo
              run: |
                mkdir -p src/client/resources/native
                rm -f src/client/resources/native/*.dll
                rm -f src/client/resources/native/*.so
                rm -f src/client/resources/native/*.dylib
            
            - name: Download all native artifacts
              uses: actions/download-artifact@v4
              with:
                path: natives

            - name: Merge natives into project
              run: |
                find natives -type f ! -path "*/espeak-ng-data/*" -exec cp {} src/client/resources/native/ \;
                cp -r natives/espeak-ng-data/* src/client/resources/native/espeak-ng-data/

            - name: List native folder for debugging
              run: ls -R src/client/resources/native
            
            - name: Make Gradle wrapper executable (grrr Linux grrrrrr)
              run: chmod +x ./gradlew

            - name: Validate Gradle wrapper
              uses: gradle/actions/wrapper-validation@v4
            
            - name: Setup JDK
              uses: actions/setup-java@v4
              with:
                java-version: '21'  # Very odd, but the build fails when using 17?
                distribution: 'temurin'

            # This hopefully works?
            - name: Cache Gradle packages
              uses: actions/cache@v3
              with:
                path: ~/.gradle/caches
                key: gradle-cache-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                restore-keys: gradle-cache-${{ runner.os }}-

            - name: Building jar
              run: ./gradlew assemble --no-daemon
            
            - name: Filter out the *.sources.jars
              run: |
                mkdir -p out
                for f in build/libs/*.jar; do
                    if [[ "$f" != *-sources.jar ]]; then
                        mv "$f" out/
                    fi
                done
            
            # Uploading ttvoice to artifacts
            - name: Upload ttvoice to artifacts
              if: success()
              uses: actions/upload-artifact@v4
              with:
                name: release
                path: out/*.jar
