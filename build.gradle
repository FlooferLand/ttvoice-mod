plugins {
	id "fabric-loom" version "${loom_version}"
	id "maven-publish"
	id "org.jetbrains.kotlin.jvm" version "${kotlin_version}"
}

version = project.mod_version
group = project.maven_group
int javaVersionInt = java_version.toInteger()

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()

	// Voice chat mod
	maven { url = "https://maven.maxhenkel.de/releases" }
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}

	// Config
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }

	// Development environment auth
	maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
}

loom {
	splitEnvironmentSourceSets()
	mods {
		"ttvoice" {
			sourceSet sourceSets.client
		}
	}
}

// NOTE: Please specify licenses of all the projects used in README.md
dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${fabric_kotlin_version}+kotlin.${kotlin_version}"
	implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"

	// Mod dependencies
	modImplementation("de.maxhenkel.voicechat:voicechat-api:${voicechat_api_version}")
	modImplementation "maven.modrinth:simple-voice-chat:fabric-${minecraft_version}-${voicechat_mod_version}"

	// Config
	implementation "com.moandjiezana.toml:toml4j:${toml4j_version}"
	include "com.moandjiezana.toml:toml4j:${toml4j_version}"
	modApi "com.terraformersmc:modmenu:${mod_menu_version}"

	// Outside dependencies
	modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:${dev_auth_version}")
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
	implementation "net.java.dev.jna:jna-platform:${jna_version}"

	// Testing
	testImplementation "net.fabricmc:fabric-loader-junit:${loader_version}"
	testImplementation "io.kotest:kotest-runner-junit5:${junit_version}"
}

// Injecting gradle.properties into other files
// TODO: Get this piece of fucking shit to work,
//       its 6 fucking AM and I can"t go to bed because I"m dissatisfied I can"t automagically expand shit inside my fabric.mod.fucking.json
processClientResources {
	exclude("**/*.lnk")

	Map<String, Object> properties = [
			"version": version,
			"minecraft_version": minecraft_version,
			"loader_version": loader_version,
			"fabric_version": fabric_version,
			"java_version": java_version,
			"kotlin_version": kotlin_version,

			// Mod dependencies
			"mod_menu_version": mod_menu_version,
			"voicechat_mod_version": voicechat_mod_version,
			"fabric_kotlin_version": fabric_kotlin_version,
	]
	properties.forEach((k, v) -> inputs.property(k, v))

	filesMatching("fabric.mod.json") {
		expand properties
	}
	filesMatching(archives_base_name + ".client.mixins.json") {
		expand "archivesName": archives_base_name
		expand "archivesBaseName": archives_base_name
	}

	duplicatesStrategy = DuplicatesStrategy.WARN
}

kotlin {
	jvmToolchain(javaVersionInt)
}
tasks.withType(JavaCompile).configureEach {
	it.options.release = javaVersionInt
}
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = javaVersionInt
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
test {
	useJUnitPlatform()
}
